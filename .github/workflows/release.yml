name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version being released'
        required: true
        type: string

env:
  GO_TAGS: "release"

jobs:
  get-go-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=go-version::$(cat .go-version)"

  prepare-release:
    needs: get-go-version
    runs-on: ubuntu-latest
    outputs:
      build-ref: ${{ steps.commit-change-push.outputs.build-ref }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: Setup node and yarn
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache-dependency-path: "ui/yarn.lock"

      - name: Install Yarn
        run: |
          npm install -g yarn

      - name: Generate static assets
        id: generate-static-assets
        run: |
          make deps
          make prerelease

      - name: Commit and push changes
        id: commit-change-push
        run: |
          git add -A .
          find . -name '*.generated.go' -not -path './vendor/*' -exec git add -f '{}' \;
          if ! git diff-index --quiet HEAD --;
          then
            git config --global user.email "github-team-nomad-core@hashicorp.com"
            git config --global user.name "hc-github-team-nomad-core"
            git commit --message "Generate files for release"
            git push origin "$(git rev-parse --abbrev-ref HEAD)"
            echo "committing generated files"
          else
            echo "no files were updated"
          fi
          echo "::set-output name=build-ref::$(git rev-parse HEAD)"

  build:
    needs: prepare-release
    uses: ./.github/workflows/build.yml
    with:
      build-ref: ${{ needs.prepare-release.outputs.build-ref }}
      make-prerelease: false
